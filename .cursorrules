# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.scratchpad.md` file as a scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

Before you start work, think through it really carefully, write the plan in the scratchpad, and then ask questions or prompt the user for clarification.


You are an expert in TypeScript, Nunjucks, static web development for uk government with an in depth knowledge of the uk government digital service manual, the design system and the content style guide.

# Checking the work
there is a Webserver running on port 8080 that you can use to check your work, you should use it to check your work regularly.

# Code Style and Structure
- Follow a Test Driven Development (TDD) approach, write the tests first, check they execute successfully but return failing results, then write the code to pass the tests.
- Run the tests regularly to ensure the code is working as expected.
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Never be afraid to refactor your code, you should do it often, if you make a change to fix things and it doesn't have the intended result, be inclined to revert the change before refactoring again.

# Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).

# TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.
- Use strict mode in TypeScript for better type safety.

# Syntax and Formatting
- Use the "function" keyword for pure functions.
- Use Prettier for consistent code formatting.

  
# Security
- Sanitize user inputs to prevent XSS attacks.


# Lessons

## User Specified Lessons

- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- the server is running on port 8080, you should use it to check your work regularly with curl.
- you can run `npm run build` to build the project and check the output for any build errors
- When creating new pages in Eleventy, check what layouts are available by looking at other similar pages. Common layouts are 'post', 'product', 'page', 'collection' - avoid using non-existent layouts like 'govuk'.
- When transforming content, ensure component templates (like reviews.njk and product-assessments.njk) are updated to reference the new product paths.
- Always run `npm run build` before testing with curl to ensure the site builds correctly.
- When creating new product categories, use existing product layouts and structure - the 'product' layout works well for campaign-style products.
- For campaign/kickstarter-style products, include visual progress indicators, clear commitment requirements, professional mockups, and realistic business cases.
- Use placeholder images (via.placeholder.com) for mockups in campaign products to demonstrate concepts without requiring actual screenshots.
- Campaign products should clearly differentiate themselves with warning banners and special badges to indicate they require pre-commitment.
- When creating multiple campaign products, vary the companies, target audiences, funding levels, and timelines to show diversity in the campaign model.
- Each campaign should have unique value propositions - FOI coordination vs planning automation demonstrates how different government challenges can be addressed.
- When creating catalog items for UK government platforms, focus on UK-appropriate security/compliance credentials (ISO 27001, Cyber Essentials Plus, UK GDPR), NOT US standards like FedRAMP. Include UK public sector business needs (citizen journey mapping, accessibility compliance), quantified business benefits, and integration with GOV.UK standards. Structure around collaborative capabilities and cross-department use cases.
- When creating a new section like "Challenges", follow the catalog pattern: create index page, add to navigation, configure collection in eleventy.config.js, and ensure tag consistency.
- Government challenges should include professional badges showing complexity/impact, detailed requirements, success metrics, and links to potential campaign solutions.
- Cross-referencing between challenges creates a cohesive problem landscape and helps users understand interconnected government needs.
- The GOV.UK Eleventy plugin enforces case-sensitive tags - tags like "AI" and "ai" are treated as different and cause build errors. Always use uppercase tags consistently across all content files to prevent tag case conflicts. This is a known issue (Eleventy #2462) with no current configuration solution.
- To override GOV.UK Eleventy plugin components: create the same directory structure in `src/_includes/components/`, copy the macro and template files, and modify as needed. The override will automatically take precedence over the plugin's default files. For example, to override the header, create `src/_includes/components/header/macro.njk` and `src/_includes/components/header/template.njk`.
- For catalog tag filtering: create a `catalogByTag` collection in eleventy.config.js that groups items by tags, then create individual tag pages at `/catalog/tags/{tag}/` using the `collection` layout. Update all catalog pages' navigation to include the new filter link. This provides clean URL routing and maintains pagination support.
- When creating navigation that appears on multiple pages (like filter menus), create a shared Nunjucks component in `src/_includes/components/` instead of duplicating the navigation markup in each page's frontmatter. Use variables like `activeFilter` to control active states. This creates a single source of truth that's much easier to maintain.
- For eliminating duplication across multiple pages that share complex navigation/data, create a custom layout template in `src/_includes/` that extends an existing layout (like collection) and uses `eleventyComputed` with JavaScript functions to dynamically generate the shared data. This approach works better than Nunjucks templates for complex logic and eliminates all duplication while maintaining proper template inheritance.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Maintain consistent tag capitalization across all content files - use lowercase tags (e.g., 'ai' not 'AI') to prevent Eleventy build errors from tag case conflicts
